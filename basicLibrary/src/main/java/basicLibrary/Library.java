/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basicLibrary;
import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }


    public static int[] roll(int rolls) {
        Random rnd = new Random();
        int[] numsRolled = new int[rolls];
        System.out.println(numsRolled + " Arr");
        for (int i = 0; i < numsRolled.length; i++) {
            numsRolled[i] = rnd.nextInt((6 - 1) + 1) + 1;
            System.out.println(i);
        }

        return numsRolled;
    }

    public static boolean containsDuplicates(int[] arr){
        System.out.println(Arrays.toString(arr));
        for(int i=0; i<arr.length; i++){
            for(int j=i+1; j<arr.length; j++){
                if(arr[i]==arr[j]){
                    return true;

                }
            }
        }
        return false;
    }

//    public static
//    public static

    public static String hashyMappy(int[][] weeklyMonthTemperatures){
        int high =Integer.MIN_VALUE;
        int low =Integer.MAX_VALUE;

        HashSet<Integer> monthTemps = new HashSet<>();

        for (int i =0; i<weeklyMonthTemperatures.length; i++){
            for (int j=0; j<weeklyMonthTemperatures[i].length; j++){
                monthTemps.add(weeklyMonthTemperatures[i][j]);
                 if( weeklyMonthTemperatures[i][j]>high){
                     high=weeklyMonthTemperatures[i][j];
                 }
                 if (weeklyMonthTemperatures[i][j]<low){
                     low=weeklyMonthTemperatures[i][j];
                 }
            }
        }
        StringBuilder tempNotSeen= new StringBuilder(String.format("high: %d\nLow: %d", low,high));
        for(int i=low; i<=high; i++){
            if(!monthTemps.contains(i))
                tempNotSeen.append(String.format("\nNever saw temperature: %d",i));
        }

        return tempNotSeen.toString();
    }

    public static String tally(List<String> votes){
        HashMap<String,Integer> plantVoteNumbers = new HashMap<>();
        for(String plant: votes) {

            if (plantVoteNumbers.containsKey(plant)){
                int previousPlantVotes= plantVoteNumbers.get(plant);
                plantVoteNumbers.put(plant, previousPlantVotes + 1);
            }else{
                plantVoteNumbers.put(plant, 1);
            }
        }
        String winnerPlant= votes.get(0);
        for (String plant: plantVoteNumbers.keySet()){
            if(plantVoteNumbers.get(plant) > plantVoteNumbers.get(winnerPlant)){
                winnerPlant = plant;
            }
        }
    return winnerPlant;
    }



}
